package com.example.FishBot;

import com.example.FishBot.config.BotConfig;
import com.example.FishBot.model.FishingPlace;
import com.example.FishBot.service.FishingPlaceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendLocation;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

//Todo –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –ø–æ —Ç–∏–ø—É –ª–æ–≤–ª–∏ (–ø–ª–∞—Ç/–æ–±—ã—á) –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
@Component

public class TelegramBot extends TelegramLongPollingBot {
    private final BotConfig botConfig;
    private final FishingPlaceService fishingPlaceService;

    @Autowired
    public TelegramBot(BotConfig botConfig, FishingPlaceService fishingPlaceService) {
        this.botConfig = botConfig;
        this.fishingPlaceService = fishingPlaceService;
    }
    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }


    //Todo –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            if (messageText.equals("/start")) {
                startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
            } else if (messageText.equals("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")) {
                handleInfoCommand(chatId); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
            } else if (messageText.equals("üé£ –†—ã–±–æ–ª–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ")) {
                handlePlaceCommand(chatId); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†—ã–±–æ–ª–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ"
                startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
            } else {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É");
            }
        }
    }


    private void startCommandReceived(Long chatId, String name) {
        String answer = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É";
        sendMessageWithKeyboard(chatId, answer);
    }

    private void sendMessage(Long chatId, String textToSend){
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(textToSend);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendMessageWithKeyboard(Long chatId, String textToSend) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(textToSend);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("üé£ –†—ã–±–æ–ª–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ"));
        row.add(new KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"));


        // –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.add(row);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboardMarkup.setKeyboard(keyboard);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardMarkup.setResizeKeyboard(true); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞
        keyboardMarkup.setOneTimeKeyboard(true); // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è

        sendMessage.setReplyMarkup(keyboardMarkup);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleInfoCommand(long chatId) {
        String infoMessage = "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏." +
                " –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞, –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ—Å—Ç–∞";
        sendMessage(chatId, infoMessage);
    }
    private void handleLocationCommand(long chatId, String messageText) {
        try {
            String[] parts = messageText.split(" ");
            if (parts.length == 3) {
                float latitude = Float.parseFloat(parts[1]);
                float longitude = Float.parseFloat(parts[2]);

                sendLocation(chatId, latitude, longitude);
            } else {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /location <—à–∏—Ä–æ—Ç–∞> <–¥–æ–ª–≥–æ—Ç–∞>");
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }
    private void handlePlaceCommand(long chatId) {
        FishingPlace place = fishingPlaceService.getRandomFishingPlace();
        sendPlaceInfo(chatId, place);
    }

    private void sendLocation(long chatId, double latitude, double longitude) {
        SendLocation locationMessage = new SendLocation();
        locationMessage.setChatId(chatId);
        locationMessage.setLatitude(latitude);
        locationMessage.setLongitude(longitude);
        try {
            execute(locationMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendPlaceInfo(long chatId, FishingPlace place) {
        sendMessage(chatId, "–ù–∞–∑–≤–∞–Ω–∏–µ: " + place.getName() + "\n–û–ø–∏—Å–∞–Ω–∏–µ: "
                + place.getDescription() + "\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: " + place.getCoordinates());

        String[] coords = place.getCoordinates().split(",");
        double latitude = Double.parseDouble(coords[0].trim());
        double longitude = Double.parseDouble(coords[1].trim());

        sendLocation(chatId, latitude, longitude);
    }

}